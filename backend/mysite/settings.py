"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

import dj_database_url
from decouple import Csv, config
from django.core.management.utils import get_random_secret_key

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default=get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

AUTH_USER_MODEL = 'base.User'

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='', cast=Csv())


# Application definition

INSTALLED_APPS = [
    'mysite.base',
    'mysite.cursos',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ordered_model',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'mysite.cursos.context_processors.listar_cursos',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.parse(
        config('DATABASE_URL'),
        conn_max_age=600,
        conn_health_checks=True,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LOGOUT_REDIRECT_URL = LOGIN_REDIRECT_URL = '/'

LANGUAGE_CODE = config('LANGUAGE_CODE', default='pt-br')

TIME_ZONE = config('TIME_ZONE', default='UTC')

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Nome do bucket S3
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME', default='').strip()


def configure_storage(has_s3_bucket: bool):
    """
    Configura o armazenamento de arquivos estáticos e de mídia,
    com base no uso de S3 ou armazenamento local.

    :param has_s3_bucket: Booleano indicando se um bucket S3 está configurado.
    :return: Um dicionário contendo as configurações.
    """
    if not has_s3_bucket:
        # Configuração para armazenamento local
        return {
            'STATIC_URL': '/static/',
            'STATIC_ROOT': BASE_DIR / 'docker/staticfiles/static',
            'MEDIA_URL': '/media/',
            'MEDIA_ROOT': BASE_DIR / 'docker/mediafiles',
            'STORAGES': {
                'default': {
                    'BACKEND': 'devpro_s3_storages.handlers.FileSystemWithValidationStorage',
                },
                'staticfiles': {
                    'BACKEND': 'django.contrib.staticfiles.storage.StaticFilesStorage',
                },
            },
        }
    else:
        # Configuração para armazenamento no S3
        AWS_S3_ACCESS_KEY_ID = config('AWS_S3_ACCESS_KEY_ID', default=None)
        AWS_S3_SECRET_ACCESS_KEY = config('AWS_S3_SECRET_ACCESS_KEY', default=None)

        if not AWS_S3_ACCESS_KEY_ID or not AWS_S3_SECRET_ACCESS_KEY:
            raise ValueError('As credenciais AWS_S3_ACCESS_KEY_ID e AWS_S3_SECRET_ACCESS_KEY não estão configuradas.')

        return {
            'STATIC_URL': f'//{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/static/',
            'STORAGES': {
                'default': {
                    'BACKEND': 'devpro_s3_storages.handlers.S3FileStorage',
                    'OPTIONS': {
                        'default_acl': 'private',
                        'location': 'media',
                    },
                },
                'staticfiles': {
                    'BACKEND': 'storages.backends.s3.S3Storage',
                    'OPTIONS': {
                        'default_acl': 'public-read',
                        'location': 'static',
                        'querystring_auth': False,
                    },
                },
            },
        }


# Determinar se o bucket S3 está configurado
has_s3_bucket = bool(AWS_STORAGE_BUCKET_NAME)

# Aplicar as configurações
storage_config = configure_storage(has_s3_bucket)

# Atribuir as configurações ao ambiente do Django
STATIC_URL = storage_config['STATIC_URL']
STATIC_ROOT = storage_config.get('STATIC_ROOT', None)
MEDIA_URL = storage_config.get('MEDIA_URL', None)
MEDIA_ROOT = storage_config.get('MEDIA_ROOT', None)
STORAGES = storage_config['STORAGES']

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
